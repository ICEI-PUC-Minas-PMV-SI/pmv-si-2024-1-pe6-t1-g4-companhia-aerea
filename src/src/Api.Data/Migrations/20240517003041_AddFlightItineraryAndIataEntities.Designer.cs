// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20240517003041_AddFlightItineraryAndIataEntities")]
    partial class AddFlightItineraryAndIataEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Api.Domain.Entities.CustomerAggregate.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Complement")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Address", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("22ca315c-e483-48c4-9483-d1c0904fee9d"),
                            City = "Belo Horizonte",
                            Complement = "Casa",
                            Country = "Brasil",
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2488),
                            Neighborhood = "Esmelo",
                            Number = "0",
                            State = "MG",
                            Street = "Rua dos Bobos",
                            ZipCode = "31615-520"
                        },
                        new
                        {
                            Id = new Guid("8ff920eb-58f6-4b4c-a4f1-2e4bf62a7741"),
                            City = "Brasília",
                            Complement = "Apartamento",
                            Country = "Brasil",
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2491),
                            Neighborhood = "Asa Sul",
                            Number = "S/N",
                            State = "DF",
                            Street = "Quadra 300",
                            ZipCode = "70000-000"
                        },
                        new
                        {
                            Id = new Guid("e82a1e06-57d7-4b2c-b8b6-1e7b013a2d05"),
                            City = "São Paulo",
                            Complement = "Bloco B",
                            Country = "Brasil",
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2497),
                            Neighborhood = "Vila Mariana",
                            Number = "1000",
                            State = "SP",
                            Street = "Avenida Paulista",
                            ZipCode = "04101-000"
                        },
                        new
                        {
                            Id = new Guid("40b3e7df-4ff9-4d8d-bc2d-7f5c6481ff1d"),
                            City = "Rio de Janeiro",
                            Complement = "Casa 2",
                            Country = "Brasil",
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2499),
                            Neighborhood = "Tijuca",
                            Number = "123",
                            State = "RJ",
                            Street = "Rua Conde de Bonfim",
                            ZipCode = "20540-060"
                        },
                        new
                        {
                            Id = new Guid("cd04928a-5934-4a9a-a68e-7cf38f2b8573"),
                            City = "Belo Horizonte",
                            Complement = "Sala 301",
                            Country = "Brasil",
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2502),
                            Neighborhood = "Centro",
                            Number = "250",
                            State = "MG",
                            Street = "Avenida Afonso Pena",
                            ZipCode = "30140-061"
                        },
                        new
                        {
                            Id = new Guid("f2427d11-9e8e-4cf8-976a-482207798ff6"),
                            City = "Piracicaba",
                            Complement = "Loja",
                            Country = "Brasil",
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2505),
                            Neighborhood = "Centro",
                            Number = "789",
                            State = "SP",
                            Street = "Rua do Rosário",
                            ZipCode = "13400-000"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.CustomerAggregate.CareerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("AverageWage")
                        .HasColumnType("double");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Career", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb15eaef-b653-4ccc-a0cd-b2720da41d55"),
                            AverageWage = 7650.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2541),
                            Description = "Desenvolvedor de Software",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("46e17017-2f85-4968-80b6-4ff1c0fc2db7"),
                            AverageWage = 9500.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2544),
                            Description = "Engenheiro Civil",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("7a4a0108-7d57-4485-a1cf-ae7b239c1573"),
                            AverageWage = 18000.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2546),
                            Description = "Médico Cirurgião",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("f22844bb-7601-439d-b6f0-d6cc1d510e0e"),
                            AverageWage = 8500.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2548),
                            Description = "Professor Universitário",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("30254dd1-bd95-4e12-9e7c-5bdc40aa61b1"),
                            AverageWage = 9500.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2550),
                            Description = "Advogado",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("82301e43-8ec9-4e7f-8a5a-3c9bc2a1a660"),
                            AverageWage = 5500.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2552),
                            Description = "Enfermeiro",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("ebbe4f7a-f025-4db4-8b52-ae0a0e3d09f7"),
                            AverageWage = 8500.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2554),
                            Description = "Analista Financeiro",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("0ec49ed6-1a07-4e63-b3d2-4ac3cb56a962"),
                            AverageWage = 6000.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2667),
                            Description = "Designer Gráfico",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("a882f777-00a3-4b98-92e8-625ca8d444c0"),
                            AverageWage = 7500.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2669),
                            Description = "Farmacêutico",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("506cb080-4a8b-42a3-9f34-bde6e1a40e9b"),
                            AverageWage = 6000.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2670),
                            Description = "Chef de Cozinha",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("61ad6489-fb49-4782-8c4b-ef9b7fb5b4c7"),
                            AverageWage = 8500.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2672),
                            Description = "Engenheiro de Software",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("ba8c526d-ec49-4469-a0e6-01d63f68712f"),
                            AverageWage = 7000.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2675),
                            Description = "Psicólogo Clínico",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("fd484e11-26b4-4e54-9f1e-66e3e529180d"),
                            AverageWage = 9000.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2677),
                            Description = "Engenheiro Mecânico",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("8e088726-ae8b-4211-8c19-cb20f97a0948"),
                            AverageWage = 12000.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2680),
                            Description = "Piloto de Avião",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("6371818f-7e95-4c65-a67f-19b74f87f47e"),
                            AverageWage = 8000.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2682),
                            Description = "Arquiteto",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("79295cb4-f755-4575-8049-f13e74cb19f4"),
                            AverageWage = 7800.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2683),
                            Description = "Analista de Sistemas",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("5af956fc-1bb9-44d0-9ee1-6435ff7e5de2"),
                            AverageWage = 8500.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2685),
                            Description = "Dentista",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("c55e8fb0-df1f-43e8-8e07-f81a4463d0a4"),
                            AverageWage = 8000.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2687),
                            Description = "Contador",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("8b3e12cf-8a0b-4d96-8a29-7614bf18d2bc"),
                            AverageWage = 5000.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2688),
                            Description = "Fotógrafo",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("4b42eeed-b9c4-43e2-8151-eb18df5f1e2b"),
                            AverageWage = 7000.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2690),
                            Description = "Analista de Marketing",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("2fc86ba3-6479-454a-9bc7-9e8ec1b78492"),
                            AverageWage = 2800.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2692),
                            Description = "Auxiliar Administrativo",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("d60ed8ae-6d30-4c2a-b946-6c751a18b871"),
                            AverageWage = 2500.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2693),
                            Description = "Atendente de Telemarketing",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("671892c6-002f-4a48-9913-3b10e20697d3"),
                            AverageWage = 3000.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2695),
                            Description = "Recepcionista",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("94edfb10-7361-4708-924f-50b3b3ff17d6"),
                            AverageWage = 2000.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2696),
                            Description = "Auxiliar de Limpeza",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("a76f70c6-6c2d-4d09-b9a0-7dc7f21ef16d"),
                            AverageWage = 1800.0,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2699),
                            Description = "Ajudante de Cozinha",
                            Note = ""
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.CustomerAggregate.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CareerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("DATE");

                    b.Property<string>("Document")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<Guid>("NationalityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PhoneId")
                        .HasColumnType("char(36)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CareerId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneId");

                    b.HasIndex("UserId");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("12c55a0e-771a-41bb-9b2a-9094db0ee7f8"),
                            AddressId = new Guid("22ca315c-e483-48c4-9483-d1c0904fee9d"),
                            CareerId = new Guid("eb15eaef-b653-4ccc-a0cd-b2720da41d55"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2868),
                            DateBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Document = "116.987.659-96",
                            Email = "customer01@email.com",
                            FirstName = "Customer 01 do Adm ",
                            LastName = "Last Name Customer 01",
                            NationalityId = new Guid("e8460494-91aa-4b03-8fd8-aefd7ad63164"),
                            PhoneId = new Guid("f56171aa-4179-4668-9618-ca1676679449"),
                            StatusId = 1,
                            UserId = new Guid("12c55a0e-771a-41bb-9b2a-9094db0ee7f8")
                        },
                        new
                        {
                            Id = new Guid("7c259bf1-ee8b-4d1d-949e-b4a3aca134c4"),
                            AddressId = new Guid("8ff920eb-58f6-4b4c-a4f1-2e4bf62a7741"),
                            CareerId = new Guid("7a4a0108-7d57-4485-a1cf-ae7b239c1573"),
                            CreatedAt = new DateTime(2024, 5, 17, 2, 30, 41, 222, DateTimeKind.Utc).AddTicks(2881),
                            DateBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Document = "189.847.392-05",
                            Email = "customer02@email.com",
                            FirstName = "Customer 02 do Adm ",
                            LastName = "Last Name Customer 02",
                            NationalityId = new Guid("e8460494-91aa-4b03-8fd8-aefd7ad63164"),
                            PhoneId = new Guid("316b3c7b-c399-403d-bd7e-98a085fb5d3a"),
                            StatusId = 1,
                            UserId = new Guid("12c55a0e-771a-41bb-9b2a-9094db0ee7f8")
                        },
                        new
                        {
                            Id = new Guid("039cd0f7-1506-4daf-9648-be0fa40434fb"),
                            AddressId = new Guid("e82a1e06-57d7-4b2c-b8b6-1e7b013a2d05"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 40, 41, 222, DateTimeKind.Utc).AddTicks(2895),
                            DateBirth = new DateTime(1994, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Document = "543.609.281-49",
                            Email = "customer03@email.com",
                            FirstName = "Customer 03 do Adm ",
                            LastName = "Last Name Customer 03",
                            NationalityId = new Guid("e8460494-91aa-4b03-8fd8-aefd7ad63164"),
                            PhoneId = new Guid("73ed0e45-4740-4a6c-9348-fd97b405da2d"),
                            StatusId = 1,
                            UserId = new Guid("12c55a0e-771a-41bb-9b2a-9094db0ee7f8")
                        },
                        new
                        {
                            Id = new Guid("f3b171ea-047a-4e9d-a282-4115a76f419f"),
                            AddressId = new Guid("40b3e7df-4ff9-4d8d-bc2d-7f5c6481ff1d"),
                            CareerId = new Guid("0ec49ed6-1a07-4e63-b3d2-4ac3cb56a962"),
                            CreatedAt = new DateTime(2024, 5, 17, 1, 30, 41, 222, DateTimeKind.Utc).AddTicks(2979),
                            DateBirth = new DateTime(1990, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Document = "786.123.549-02",
                            Email = "customer01r@email.com",
                            FirstName = "Customer 01 do regular 01 ",
                            LastName = "Last Name Customer 01R",
                            NationalityId = new Guid("1c52d7f7-49ac-45b3-a3fc-8375068e97ae"),
                            PhoneId = new Guid("ec1ab1c0-c72a-4030-89f0-9833e9f621f4"),
                            StatusId = 1,
                            UserId = new Guid("5e1849cd-ddee-4982-b4c6-8d4b3c20b041")
                        },
                        new
                        {
                            Id = new Guid("fdf6777d-f6d3-4c54-96c3-4c498aa0903b"),
                            AddressId = new Guid("cd04928a-5934-4a9a-a68e-7cf38f2b8573"),
                            CareerId = new Guid("ba8c526d-ec49-4469-a0e6-01d63f68712f"),
                            CreatedAt = new DateTime(2024, 5, 17, 3, 30, 41, 222, DateTimeKind.Utc).AddTicks(2989),
                            DateBirth = new DateTime(1994, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Document = "952.746.830-61",
                            Email = "customer02r@email.com",
                            FirstName = "Customer 02 do regular 01 ",
                            LastName = "Last Name Customer 02R",
                            NationalityId = new Guid("1c52d7f7-49ac-45b3-a3fc-8375068e97ae"),
                            PhoneId = new Guid("a52ef79d-f22c-4a44-8d92-2fcf4823188b"),
                            StatusId = 1,
                            UserId = new Guid("5e1849cd-ddee-4982-b4c6-8d4b3c20b041")
                        },
                        new
                        {
                            Id = new Guid("0c0e881c-61cf-4d12-8788-94e118d22177"),
                            AddressId = new Guid("f2427d11-9e8e-4cf8-976a-482207798ff6"),
                            CareerId = new Guid("ba8c526d-ec49-4469-a0e6-01d63f68712f"),
                            CreatedAt = new DateTime(2024, 5, 17, 3, 30, 41, 222, DateTimeKind.Utc).AddTicks(3001),
                            DateBirth = new DateTime(1994, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Document = "367.195.482-34",
                            Email = "customer03r@email.com",
                            FirstName = "Customer 03 do regular 01 ",
                            LastName = "Last Name Customer 02R",
                            NationalityId = new Guid("1c52d7f7-49ac-45b3-a3fc-8375068e97ae"),
                            PhoneId = new Guid("2b2f3f5f-dfb9-4fe6-98a2-6664b9c6ab08"),
                            StatusId = 1,
                            UserId = new Guid("5e1849cd-ddee-4982-b4c6-8d4b3c20b041")
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.CustomerAggregate.NationalityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Nationality", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8460494-91aa-4b03-8fd8-aefd7ad63164"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2732),
                            Description = "Brasileira",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("66d38f80-5b2c-409e-b4f6-68b017af22db"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2734),
                            Description = "Americana",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("ae7c6886-4a8c-4878-8ff6-5755046a93d8"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2736),
                            Description = "Canadense",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("f700bd3b-1256-4f55-a682-d1e7c10f59a1"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2740),
                            Description = "Mexicana",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("1c52d7f7-49ac-45b3-a3fc-8375068e97ae"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2741),
                            Description = "Argentina",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("5f5e0a2c-4201-4a2e-80e5-85d1ee8cf077"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2743),
                            Description = "Chilena",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("0a3a3f5f-bf97-4a64-bd07-1b45468de336"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2744),
                            Description = "Inglesa",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("334f5a76-3b27-45f0-8371-75f36a7381c2"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2746),
                            Description = "Francesa",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("d8f23df8-d9f6-4696-9b0b-1613c1e4ef63"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2748),
                            Description = "Italiana",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("ca7ae9c3-62f3-4a05-b7ac-0c6e3f29b10e"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2749),
                            Description = "Alemã",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("96e01522-d4b5-4d07-bfe6-f4c6151b2f33"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2751),
                            Description = "Espanhola",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("f920c11e-f6f7-42a3-b3bc-83701241c781"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2753),
                            Description = "Portuguesa",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("c301e7a7-d90e-47e3-b241-3fdad89d0b79"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2754),
                            Description = "Sueca",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("7ff9a21e-3ff2-4ef0-aac1-1181a6ff7a78"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2757),
                            Description = "Norueguesa",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("bd609feb-4d8e-4384-bcd1-7641fb4b3e1a"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2759),
                            Description = "Japonesa",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("ec91c3d3-fb1c-44d1-a01e-af4bb1a4f3f5"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2761),
                            Description = "Chinesa",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("a5658e1d-61ff-4e48-9a38-95bfb631e7a1"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2764),
                            Description = "Russa",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("0e61a8b8-0a65-4e3e-9203-dbe526054bb4"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2766),
                            Description = "Indiana",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("bb179145-250f-4260-80e0-232e5743ec7b"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2768),
                            Description = "Coreana",
                            Note = ""
                        },
                        new
                        {
                            Id = new Guid("cd1b540e-119a-4417-bf69-6fd4f8a558c1"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2770),
                            Description = "Australiana",
                            Note = ""
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.CustomerAggregate.PhoneEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DDD")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .HasColumnType("longtext");

                    b.Property<int>("TypePhone")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Phone", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f56171aa-4179-4668-9618-ca1676679449"),
                            CountryCode = "55",
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2803),
                            DDD = "31",
                            Number = "9 9944-2621",
                            TypePhone = 1
                        },
                        new
                        {
                            Id = new Guid("316b3c7b-c399-403d-bd7e-98a085fb5d3a"),
                            CountryCode = "55",
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2807),
                            DDD = "11",
                            Number = "3123-4567",
                            TypePhone = 2
                        },
                        new
                        {
                            Id = new Guid("73ed0e45-4740-4a6c-9348-fd97b405da2d"),
                            CountryCode = "55",
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2810),
                            DDD = "21",
                            Number = "98765-4321",
                            TypePhone = 3
                        },
                        new
                        {
                            Id = new Guid("ec1ab1c0-c72a-4030-89f0-9833e9f621f4"),
                            CountryCode = "55",
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2812),
                            DDD = "41",
                            Number = "99988-7766",
                            TypePhone = 1
                        },
                        new
                        {
                            Id = new Guid("a52ef79d-f22c-4a44-8d92-2fcf4823188b"),
                            CountryCode = "55",
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2814),
                            DDD = "51",
                            Number = "3030-2020",
                            TypePhone = 2
                        },
                        new
                        {
                            Id = new Guid("2b2f3f5f-dfb9-4fe6-98a2-6664b9c6ab08"),
                            CountryCode = "55",
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(2815),
                            DDD = "61",
                            Number = "8765-4321",
                            TypePhone = 3
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("DATE");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TypeUser")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("12c55a0e-771a-41bb-9b2a-9094db0ee7f8"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 40, 638, DateTimeKind.Utc).AddTicks(1426),
                            DateBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@email.com",
                            FirstName = "User Adm",
                            LastName = "Adm Master",
                            Password = "$2a$11$4QtyP4E8H5cU5tYamqhe1.DLl9JShlRsHkygu9Sn8NywtUQLSfWLq",
                            Status = 1,
                            TypeUser = 1
                        },
                        new
                        {
                            Id = new Guid("5e1849cd-ddee-4982-b4c6-8d4b3c20b041"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 40, 942, DateTimeKind.Utc).AddTicks(2399),
                            DateBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@email.com",
                            FirstName = "User Regular",
                            LastName = "Last Regular",
                            Password = "$2a$11$Iqmaq65KT6UIN6eSwJ9wuuwZap72V9VR9UpU29ya8ziEJzGEr/aXi",
                            Status = 1,
                            TypeUser = 2
                        },
                        new
                        {
                            Id = new Guid("7fc20e97-a58d-4c92-b2c2-a41eedd931e1"),
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(1956),
                            DateBirth = new DateTime(1992, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jose@email.com",
                            FirstName = "Jose",
                            LastName = "Pereira",
                            Password = "$2a$11$7Won8n0r6T.e29xTRbcFku67mQDylqbAUlgjWuwm7OXfy.E94vkN.",
                            Status = 1,
                            TypeUser = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.FlightAggregate.FlightItineraryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ArriveDate")
                        .HasColumnType("DATE");

                    b.Property<Guid>("ArriveIATAId")
                        .HasColumnType("char(36)")
                        .HasColumnName("arriveiataid");

                    b.Property<bool>("Available")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("LeaveDate")
                        .HasColumnType("DATE");

                    b.Property<Guid>("LeaveIATAId")
                        .HasColumnType("char(36)")
                        .HasColumnName("leaveiataid");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ArriveIATAId");

                    b.HasIndex("LeaveIATAId");

                    b.ToTable("Intinerary", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.FlightAggregate.IataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Airport")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Available")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("FlightItineraryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("IATACode")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FlightItineraryId");

                    b.ToTable("Iata", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d45c3c4-3c1e-4b3f-8d9e-c8a7d6f7b8a1"),
                            Airport = "Aeroporto Internacional de Cruzeiro do Sul",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3033),
                            IATACode = "CZS",
                            Location = "Cruzeiro do Sul"
                        },
                        new
                        {
                            Id = new Guid("6b3e4a9d-8a1c-4c3d-8d2e-b4a6f7e8c9d1"),
                            Airport = "Aeroporto Internacional de Rio Branco",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3079),
                            IATACode = "RBR",
                            Location = "Rio Branco"
                        },
                        new
                        {
                            Id = new Guid("b9f5a4d8-7c3e-4d9b-8a1d-c6a7f8e9b4c3"),
                            Airport = "Aeroporto Internacional Zumbi dos Palmares",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3083),
                            IATACode = "MCZ",
                            Location = "Maceió"
                        },
                        new
                        {
                            Id = new Guid("e3d5c7f8-4a2d-4c1b-9d8e-c5a7f6e8b3d2"),
                            Airport = "Aeroporto Internacional de Macapá",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3085),
                            IATACode = "MCP",
                            Location = "Macapá"
                        },
                        new
                        {
                            Id = new Guid("a2c7d9e6-8b4a-4d1c-8a5e-b6c7f8e9d4b5"),
                            Airport = "Aeroporto Internacional Eduardo Gomes",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3088),
                            IATACode = "MAO",
                            Location = "Manaus"
                        },
                        new
                        {
                            Id = new Guid("c5d6e7f9-4a3c-4b2d-8a1c-d7b8f9e5c4a2"),
                            Airport = "Aeroporto Internacional de Tabatinga",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3090),
                            IATACode = "TBT",
                            Location = "Tabatinga"
                        },
                        new
                        {
                            Id = new Guid("f7d8c9b5-3e4d-4a1b-9c8e-c9a7f6e5b3d4"),
                            Airport = "Aeroporto Internacional Deputado Luís Eduardo Magalhães",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3092),
                            IATACode = "SSA",
                            Location = "Salvador"
                        },
                        new
                        {
                            Id = new Guid("d4b5c3e7-6a2d-4b9e-8c1d-b6a7f9e8c3d1"),
                            Airport = "Aeroporto Jorge Amado",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3095),
                            IATACode = "IOS",
                            Location = "Ilhéus"
                        },
                        new
                        {
                            Id = new Guid("e2a3d4c5-8b4a-4d2b-8e1c-c5a7f6d9b3e6"),
                            Airport = "Aeroporto Pedro Otacílio Figueiredo",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3096),
                            IATACode = "VDC",
                            Location = "Vitória da Conquista"
                        },
                        new
                        {
                            Id = new Guid("d8b9c7e4-3a2d-4d1c-8b5e-a6c7f8e5b9d2"),
                            Airport = "Aeroporto Internacional Pinto Martins",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3101),
                            IATACode = "FOR",
                            Location = "Fortaleza"
                        },
                        new
                        {
                            Id = new Guid("b4d9e6c8-7a3e-4d2b-9c1d-d5a7f8b6c3e1"),
                            Airport = "Aeroporto Regional de Jericoacoara",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3103),
                            IATACode = "JJD",
                            Location = "Jericoacoara"
                        },
                        new
                        {
                            Id = new Guid("c6a7d5b8-8b4e-4a1d-8c9e-b7a8f6e9c3d4"),
                            Airport = "Aeroporto Regional do Cariri",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3105),
                            IATACode = "QXQ",
                            Location = "Juazeiro do Norte"
                        },
                        new
                        {
                            Id = new Guid("f6b8e7c9-3a4d-4d1b-9c8e-c5a7f6e3b2d1"),
                            Airport = "Aeroporto Internacional Presidente Juscelino Kubitschek",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3106),
                            IATACode = "BSB",
                            Location = "Brasília"
                        },
                        new
                        {
                            Id = new Guid("d4b3c9a6-7e4a-4d1b-8c5e-b7a8f9e6c3d4"),
                            Airport = "Aeroporto Eurico de Aguiar Salles",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3108),
                            IATACode = "VIX",
                            Location = "Vitória"
                        },
                        new
                        {
                            Id = new Guid("e5b4c3a7-8b3d-4d1b-8e9e-c6a7f8e4d3c2"),
                            Airport = "Aeroporto Santa Genoveva",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3110),
                            IATACode = "GYN",
                            Location = "Goiânia"
                        },
                        new
                        {
                            Id = new Guid("a8d7c6e5-3b4a-4d9b-8e1c-c5a7f8b6d3e1"),
                            Airport = "Aeroporto Nelson Ribeiro Guimarães",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3112),
                            IATACode = "CLV",
                            Location = "Caldas Novas"
                        },
                        new
                        {
                            Id = new Guid("c6a7f9b8-7e3d-4a1b-9c8e-d5a7f6e9b4d3"),
                            Airport = "Aeroporto Internacional Marechal Cunha Machado",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3115),
                            IATACode = "SLZ",
                            Location = "São Luís"
                        },
                        new
                        {
                            Id = new Guid("b4d3c9e6-8a3e-4d1b-8e5c-c6a7f8d9b3e2"),
                            Airport = "Aeroporto Prefeito Renato Moreira",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3118),
                            IATACode = "IMP",
                            Location = "Imperatriz"
                        },
                        new
                        {
                            Id = new Guid("f7d8e9c5-3a4b-4d1c-9e8e-b6a7f9e6d3c1"),
                            Airport = "Aeroporto Internacional Marechal Rondon",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3120),
                            IATACode = "CGB",
                            Location = "Cuiabá"
                        },
                        new
                        {
                            Id = new Guid("d5b3c6a7-8b4e-4a1b-8c9e-c7a8f6e9b4d2"),
                            Airport = "Aeroporto Municipal de Sinop",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3122),
                            IATACode = "OPS",
                            Location = "Sinop"
                        },
                        new
                        {
                            Id = new Guid("a8d7f9e6-3b4a-4d1c-8e9e-c5a7f8d6c3b4"),
                            Airport = "Aeroporto Internacional de Rondonópolis",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3124),
                            IATACode = "ROO",
                            Location = "Rondonópolis"
                        },
                        new
                        {
                            Id = new Guid("c6a7d9e8-7e3b-4d1b-9e8c-d5a7f6c9b4e1"),
                            Airport = "Aeroporto Internacional de Campo Grande",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3125),
                            IATACode = "CGR",
                            Location = "Campo Grande"
                        },
                        new
                        {
                            Id = new Guid("b4d3f9e6-8a4e-4d1b-8e5c-c6a7f8b3d9e2"),
                            Airport = "Aeroporto Francisco de Matos Pereira",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3128),
                            IATACode = "DOU",
                            Location = "Dourados"
                        },
                        new
                        {
                            Id = new Guid("e7d8c9b5-3a4d-4d1c-9e8e-c5a7f6d9b3e1"),
                            Airport = "Aeroporto Internacional de Confins",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3130),
                            IATACode = "CNF",
                            Location = "Belo Horizonte"
                        },
                        new
                        {
                            Id = new Guid("d5b3e6c7-8a4e-4a1b-8c9e-c7a8f6e5b9d2"),
                            Airport = "Aeroporto da Pampulha",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3132),
                            IATACode = "PLU",
                            Location = "Belo Horizonte"
                        },
                        new
                        {
                            Id = new Guid("a8d7c9e6-3b4a-4d1c-8e5e-c5a7f8b6d3e4"),
                            Airport = "Aeroporto de Uberlândia",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3133),
                            IATACode = "UDI",
                            Location = "Uberlândia"
                        },
                        new
                        {
                            Id = new Guid("f7d8e9c5-4a3b-4d1c-9e8e-b6a7f6d9b3c1"),
                            Airport = "Aeroporto de Montes Claros",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3135),
                            IATACode = "MOC",
                            Location = "Montes Claros"
                        },
                        new
                        {
                            Id = new Guid("4178772e-1940-42cc-8d05-cab1a472c7f3"),
                            Airport = "Aeroporto Internacional de Belém",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3161),
                            IATACode = "BEL",
                            Location = "Belém"
                        },
                        new
                        {
                            Id = new Guid("f34ce5f8-4447-4bfc-964a-2bbb44b00826"),
                            Airport = "Aeroporto Internacional de Santarém",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3163),
                            IATACode = "STM",
                            Location = "Santarém"
                        },
                        new
                        {
                            Id = new Guid("a96e7a82-f70a-4f92-a317-96bf339c32f9"),
                            Airport = "Aeroporto de Marabá",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3165),
                            IATACode = "MAB",
                            Location = "Marabá"
                        },
                        new
                        {
                            Id = new Guid("d1c39dd1-09ef-4e8e-9590-ffccd2089bb7"),
                            Airport = "Aeroporto Internacional Presidente Castro Pinto",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3166),
                            IATACode = "JPA",
                            Location = "João Pessoa"
                        },
                        new
                        {
                            Id = new Guid("33e02c8e-253d-4f4f-b73c-18da45ca0817"),
                            Airport = "Aeroporto de Campina Grande",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3169),
                            IATACode = "CPV",
                            Location = "Campina Grande"
                        },
                        new
                        {
                            Id = new Guid("549c8ed9-bfba-4705-996c-b368c1fa47e9"),
                            Airport = "Aeroporto Internacional Afonso Pena",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3170),
                            IATACode = "CWB",
                            Location = "Curitiba"
                        },
                        new
                        {
                            Id = new Guid("1c380a61-bc40-409c-a050-dbb0d8d8c2ee"),
                            Airport = "Aeroporto de Londrina",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3189),
                            IATACode = "LDB",
                            Location = "Londrina"
                        },
                        new
                        {
                            Id = new Guid("6ecf260f-d927-42ec-a624-df681b3c45fb"),
                            Airport = "Aeroporto Internacional de Foz do Iguaçu",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3192),
                            IATACode = "IGU",
                            Location = "Foz do Iguaçu"
                        },
                        new
                        {
                            Id = new Guid("4e2c18f0-3eb7-424e-a5ff-18f878d5543d"),
                            Airport = "Aeroporto Internacional dos Guararapes",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3194),
                            IATACode = "REC",
                            Location = "Recife"
                        },
                        new
                        {
                            Id = new Guid("39eb8e1a-be3c-462f-8dcc-9f5a079381c0"),
                            Airport = "Aeroporto de Petrolina",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3196),
                            IATACode = "PNZ",
                            Location = "Petrolina"
                        },
                        new
                        {
                            Id = new Guid("966963e4-dc10-4576-a9e7-7e178943febc"),
                            Airport = "Aeroporto Senador Petrônio Portella",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3197),
                            IATACode = "THE",
                            Location = "Teresina"
                        },
                        new
                        {
                            Id = new Guid("e7632821-dc68-4d1b-aca9-4a3c06472a85"),
                            Airport = "Aeroporto Internacional Prefeito Doutor João Silva Filho",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3199),
                            IATACode = "PHB",
                            Location = "Parnaíba"
                        },
                        new
                        {
                            Id = new Guid("99a7b440-6cc4-4d63-b094-490f5867892a"),
                            Airport = "Aeroporto Internacional do Galeão",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3200),
                            IATACode = "GIG",
                            Location = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = new Guid("3fbeaba7-c3b3-4d2b-8b1b-9b05dfeaa4c5"),
                            Airport = "Aeroporto Santos Dumont",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3202),
                            IATACode = "SDU",
                            Location = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = new Guid("75d5984e-734e-4d42-bb94-70035333aaa8"),
                            Airport = "Aeroporto de Cabo Frio",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3206),
                            IATACode = "CFB",
                            Location = "Cabo Frio"
                        },
                        new
                        {
                            Id = new Guid("fcb34970-5948-4d77-8c7d-ee17919ce064"),
                            Airport = "Aeroporto Internacional Governador Aluízio Alves",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3209),
                            IATACode = "NAT",
                            Location = "Natal"
                        },
                        new
                        {
                            Id = new Guid("df1cfd5d-8102-438b-842a-84d4b5c3be5a"),
                            Airport = "Aeroporto Regional de Mossoró",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3210),
                            IATACode = "MII",
                            Location = "Mossoró"
                        },
                        new
                        {
                            Id = new Guid("706d3702-8fd3-4de7-8610-89c0244a5e68"),
                            Airport = "Aeroporto Internacional Salgado Filho",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3212),
                            IATACode = "POA",
                            Location = "Porto Alegre"
                        },
                        new
                        {
                            Id = new Guid("d136ceb0-ec31-4e54-86c2-5a9030150dd3"),
                            Airport = "Aeroporto Regional Hugo Cantergiani",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3214),
                            IATACode = "CXJ",
                            Location = "Caxias do Sul"
                        },
                        new
                        {
                            Id = new Guid("0f31f0df-a89d-4df5-a7d0-b62e4a633043"),
                            Airport = "Aeroporto Lauro Kortz",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3216),
                            IATACode = "PFB",
                            Location = "Passo Fundo"
                        },
                        new
                        {
                            Id = new Guid("558d56a8-92aa-4a20-986f-30154245358f"),
                            Airport = "Aeroporto Internacional Governador Jorge Teixeira de Oliveira",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3218),
                            IATACode = "PVH",
                            Location = "Porto Velho"
                        },
                        new
                        {
                            Id = new Guid("759f3a80-d441-4b75-b590-5418f96f80ca"),
                            Airport = "Aeroporto José Coleto",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3219),
                            IATACode = "JPR",
                            Location = "Ji-Paraná"
                        },
                        new
                        {
                            Id = new Guid("bb29986d-b495-4b9b-ba03-bec26d6d2977"),
                            Airport = "Aeroporto de Vilhena",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3223),
                            IATACode = "BVH",
                            Location = "Vilhena"
                        },
                        new
                        {
                            Id = new Guid("71b1e0d3-5214-462d-96ba-b87f7f624dc1"),
                            Airport = "Aeroporto Internacional Atlas Brasil Cantanhede",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3226),
                            IATACode = "BVB",
                            Location = "Boa Vista"
                        },
                        new
                        {
                            Id = new Guid("8df9948b-d1b9-4e31-8777-de92415e0dab"),
                            Airport = "Aeroporto Internacional Hercílio Luz",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3227),
                            IATACode = "FLN",
                            Location = "Florianópolis"
                        },
                        new
                        {
                            Id = new Guid("852bccc0-c1ea-4d61-a01d-1a2cb92b2e78"),
                            Airport = "Aeroporto Internacional de Navegantes",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3229),
                            IATACode = "NVT",
                            Location = "Navegantes"
                        },
                        new
                        {
                            Id = new Guid("7c5846cf-4797-41ea-86ef-7ccb7564d365"),
                            Airport = "Aeroporto Lauro Carneiro de Loyola",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3231),
                            IATACode = "JOI",
                            Location = "Joinville"
                        },
                        new
                        {
                            Id = new Guid("ba8f4871-33aa-4889-9c52-9a813a5f1b1e"),
                            Airport = "Aeroporto Internacional de Guarulhos",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3232),
                            IATACode = "GRU",
                            Location = "São Paulo"
                        },
                        new
                        {
                            Id = new Guid("1561fee0-fd49-4bd8-bb5a-ab923d63b29a"),
                            Airport = "Aeroporto de Congonhas",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3234),
                            IATACode = "CGH",
                            Location = "São Paulo"
                        },
                        new
                        {
                            Id = new Guid("35444197-16d7-471c-8695-d91753d44d77"),
                            Airport = "Aeroporto Internacional de Viracopos",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3235),
                            IATACode = "VCP",
                            Location = "Campinas"
                        },
                        new
                        {
                            Id = new Guid("5b4ac581-4947-469c-a72a-62a4c9d38034"),
                            Airport = "Aeroporto Internacional de Aracaju",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3239),
                            IATACode = "AJU",
                            Location = "Aracaju"
                        },
                        new
                        {
                            Id = new Guid("45fd78b8-d1fd-4dea-8769-85e995a79bda"),
                            Airport = "Aeroporto Brigadeiro Lysias Rodrigues",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3241),
                            IATACode = "PMW",
                            Location = "Palmas"
                        },
                        new
                        {
                            Id = new Guid("6a76a905-cd07-4f99-a0ef-8af2e6e99d23"),
                            Airport = "Aeroporto de Araguaína",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3243),
                            IATACode = "AUX",
                            Location = "Araguaína"
                        },
                        new
                        {
                            Id = new Guid("f5dcffed-b74e-4cd1-9629-2070e1e8bc1d"),
                            Airport = "Aeroporto de Gurupi",
                            Available = true,
                            CreatedAt = new DateTime(2024, 5, 17, 0, 30, 41, 222, DateTimeKind.Utc).AddTicks(3245),
                            IATACode = "GMP",
                            Location = "Gurupi"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.CustomerAggregate.CustomerEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.CustomerAggregate.AddressEntity", null)
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.CustomerAggregate.CareerEntity", null)
                        .WithMany()
                        .HasForeignKey("CareerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Api.Domain.Entities.CustomerAggregate.PhoneEntity", null)
                        .WithMany()
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.FlightAggregate.FlightItineraryEntity", b =>
                {
                    b.HasOne("Domain.Entities.FlightAggregate.IataEntity", null)
                        .WithMany()
                        .HasForeignKey("ArriveIATAId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.FlightAggregate.IataEntity", null)
                        .WithMany()
                        .HasForeignKey("LeaveIATAId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.FlightAggregate.IataEntity", b =>
                {
                    b.HasOne("Domain.Entities.FlightAggregate.FlightItineraryEntity", "FlightItinerary")
                        .WithMany()
                        .HasForeignKey("FlightItineraryId");

                    b.Navigation("FlightItinerary");
                });
#pragma warning restore 612, 618
        }
    }
}
